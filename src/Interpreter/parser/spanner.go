// Code generated by goyacc -o src/Interpreter/parser/spanner.go src/Interpreter/parser/spanner.go.y. DO NOT EDIT.

//line src/Interpreter/parser/spanner.go.y:1

package parser

import __yyfmt__ "fmt"

//line src/Interpreter/parser/spanner.go.y:3

import (
	"minisql/src/Interpreter/types"
	"minisql/src/Interpreter/value"
	"strconv"
)

//line src/Interpreter/parser/spanner.go.y:11
type yySymType struct {
	yys           int
	empty         struct{}
	flag          bool
	i64           int64
	int           int
	f64           float64
	str           string
	strs          []string
	col           types.Column
	cols          []types.Column
	coltype       types.ColumnType
	key           types.Key
	keys          []types.Key
	keyorder      types.KeyOrder
	clstr         types.Cluster
	ondelete      types.OnDelete
	stcls         types.StoringClause
	intlr         types.Interleave
	intlrs        []types.Interleave
	fieldsname    types.FieldsName
	LastToken     int
	expr          types.Expr
	where         *types.Where
	limit         types.Limit
	compare       value.CompareType
	valuetype     value.Value
	valuetypelist []value.Value
	setexpr       types.SetExpr
	setexprlist   []types.SetExpr
}

const IDENT = 57346
const IDENT_LEGAL = 57347
const PRIMARY = 57348
const KEY = 57349
const ASC = 57350
const DESC = 57351
const IN = 57352
const INTERLEAVE = 57353
const AND = 57354
const OR = 57355
const NOT = 57356
const NULL = 57357
const ON = 57358
const CASCADE = 57359
const NO = 57360
const ACTION = 57361
const MAX = 57362
const UNIQUE = 57363
const ADD = 57364
const COLUMN = 57365
const SET = 57366
const TRUE = 57367
const FALSE = 57368
const allow_commit_timestamp = 57369
const LE = 57370
const GE = 57371
const NE = 57372
const CREATE = 57373
const DROP = 57374
const DATABASE = 57375
const TABLE = 57376
const INDEX = 57377
const STORING = 57378
const SELECT = 57379
const WHERE = 57380
const FROM = 57381
const LIMIT = 57382
const OFFSET = 57383
const VALUES = 57384
const INSERT = 57385
const INTO = 57386
const UPDATE = 57387
const DELETE = 57388
const BOOL = 57389
const INT64 = 57390
const FLOAT64 = 57391
const STRING = 57392
const BYTES = 57393
const DATE = 57394
const TIMESTAMP = 57395
const database_id = 57396
const table_name = 57397
const column_name = 57398
const index_name = 57399
const decimal_value = 57400
const hex_value = 57401
const float_value = 57402
const string_value = 57403

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"IDENT_LEGAL",
	"PRIMARY",
	"KEY",
	"ASC",
	"DESC",
	"IN",
	"INTERLEAVE",
	"AND",
	"OR",
	"NOT",
	"NULL",
	"ON",
	"CASCADE",
	"NO",
	"ACTION",
	"MAX",
	"UNIQUE",
	"ADD",
	"COLUMN",
	"SET",
	"TRUE",
	"FALSE",
	"allow_commit_timestamp",
	"'('",
	"','",
	"')'",
	"';'",
	"'*'",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"CREATE",
	"DROP",
	"DATABASE",
	"TABLE",
	"INDEX",
	"STORING",
	"SELECT",
	"WHERE",
	"FROM",
	"LIMIT",
	"OFFSET",
	"VALUES",
	"INSERT",
	"INTO",
	"UPDATE",
	"DELETE",
	"BOOL",
	"INT64",
	"FLOAT64",
	"STRING",
	"BYTES",
	"DATE",
	"TIMESTAMP",
	"database_id",
	"table_name",
	"column_name",
	"index_name",
	"decimal_value",
	"hex_value",
	"float_value",
	"string_value",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 202

var yyAct = [...]int{
	82, 39, 179, 149, 99, 130, 148, 100, 80, 32,
	65, 69, 147, 131, 132, 106, 89, 90, 91, 67,
	92, 93, 94, 58, 49, 104, 105, 95, 52, 48,
	45, 42, 47, 44, 13, 14, 169, 41, 63, 135,
	15, 151, 97, 50, 54, 78, 16, 74, 17, 18,
	43, 60, 68, 174, 34, 35, 36, 33, 131, 132,
	62, 152, 68, 46, 68, 76, 107, 108, 109, 101,
	79, 51, 188, 113, 114, 98, 29, 30, 31, 73,
	40, 134, 175, 160, 77, 161, 170, 112, 28, 111,
	115, 138, 123, 161, 162, 55, 56, 127, 126, 117,
	118, 119, 120, 121, 122, 83, 124, 38, 134, 133,
	51, 110, 53, 27, 26, 25, 24, 23, 22, 81,
	21, 20, 136, 137, 139, 183, 141, 86, 51, 181,
	154, 142, 129, 128, 146, 75, 57, 33, 182, 176,
	177, 157, 153, 72, 159, 113, 114, 180, 144, 158,
	184, 164, 165, 125, 55, 56, 40, 166, 167, 168,
	85, 150, 71, 66, 61, 171, 2, 12, 19, 11,
	10, 9, 8, 7, 6, 5, 4, 3, 1, 64,
	116, 96, 37, 185, 178, 187, 186, 172, 173, 59,
	143, 156, 155, 140, 84, 163, 103, 102, 145, 88,
	87, 70,
}

var yyPact = [...]int{
	-5, -5, -1000, 90, 89, 87, 86, 85, 84, 83,
	82, 57, 45, 36, 13, 75, -15, -32, 3, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-29, -33, 20, -1000, -30, -34, -41, -4, -1000, 99,
	-1000, -35, 88, 150, -1000, 108, -42, -1000, -1000, -1000,
	150, 159, 10, 158, 6, -1000, -1000, 157, 127, 18,
	-1000, -1000, 107, 151, 16, -1000, 37, -1000, 91, 154,
	98, -39, -36, -6, 150, 0, 81, -1000, 158, 0,
	133, 91, 66, 91, 76, 146, 157, 116, -1000, -1000,
	-1000, -1000, 105, -1000, -1000, 104, -1000, -53, -1000, 79,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-11, -1000, -1000, 91, 91, 61, 0, -1000, -1000, -1000,
	-1000, -1000, -1000, 133, 97, 103, -1000, 134, -8, 156,
	12, -1000, -1000, -1000, 0, 102, 133, 133, -1000, -1000,
	-1000, 125, 156, -1000, 129, 53, -1000, -1000, 64, -1000,
	143, -53, -53, -1000, 0, -1000, -1000, -18, 56, -1000,
	-1000, 156, 9, -1000, -1000, -1000, -1000, -1000, 52, 122,
	-1000, -1000, 136, -1000, 101, -1000, -1000, 119, 96, -1000,
	140, 151, -1000, 136, 150, 42, -1000, -1000, -1000,
}

var yyPgo = [...]int{
	0, 201, 11, 200, 199, 198, 197, 196, 195, 3,
	6, 194, 193, 192, 191, 190, 9, 0, 1, 189,
	188, 187, 2, 184, 182, 8, 181, 180, 7, 5,
	19, 10, 179, 4, 178, 166, 177, 176, 175, 174,
	173, 172, 171, 170, 169, 167,
}

var yyR1 = [...]int{
	0, 34, 34, 35, 35, 35, 35, 35, 35, 35,
	35, 35, 35, 36, 37, 2, 2, 2, 1, 11,
	11, 10, 10, 9, 8, 8, 8, 12, 12, 13,
	14, 14, 14, 3, 4, 4, 4, 4, 4, 4,
	5, 5, 15, 15, 38, 16, 16, 21, 21, 20,
	18, 18, 23, 23, 23, 22, 39, 40, 41, 43,
	43, 44, 32, 32, 31, 45, 42, 24, 24, 19,
	19, 30, 30, 25, 25, 25, 25, 25, 33, 33,
	28, 28, 28, 28, 28, 28, 28, 27, 27, 27,
	27, 27, 27, 26, 26, 26, 26, 29, 29, 6,
	6, 7, 17, 17,
}

var yyR2 = [...]int{
	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 3, 8, 0, 1, 3, 4, 0,
	5, 1, 3, 2, 0, 1, 1, 0, 2, 1,
	0, 3, 4, 1, 1, 1, 1, 4, 1, 1,
	1, 1, 0, 2, 11, 0, 1, 0, 1, 4,
	1, 3, 0, 1, 3, 3, 3, 3, 3, 7,
	10, 5, 1, 3, 3, 4, 6, 1, 1, 1,
	3, 0, 2, 3, 3, 3, 3, 2, 1, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 2, 4, 4, 1, 1, 1,
	1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -34, -35, -36, -37, -38, -39, -40, -41, -42,
	-43, -44, -45, 39, 40, 45, 51, 53, 54, -35,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	41, 42, -16, 21, 41, 42, 43, -24, 32, -18,
	5, 52, 63, 47, 62, 63, 43, 62, 63, 65,
	47, 29, 63, 24, -17, 4, 5, 28, 65, -19,
	-17, 5, 50, 28, -32, -31, 5, -30, 46, -2,
	-1, 5, 16, -30, 29, 28, -18, -30, 29, 33,
	-25, 28, -17, 14, -11, 6, 29, -3, -4, 55,
	56, 57, 59, 60, 61, 63, -26, 48, -17, -33,
	-28, 69, -6, -7, 25, 26, 15, 66, 67, 68,
	30, -31, -28, 12, 13, -25, -27, 33, 34, 35,
	36, 37, 38, -25, 30, 7, -2, -16, 28, 28,
	-29, 66, 67, 30, 29, 50, -25, -25, 30, -28,
	-12, 29, 28, -15, 14, -5, -29, 20, -10, -9,
	5, 29, 49, -28, 28, -13, -14, 16, -10, 15,
	30, 29, 30, -8, 8, 9, -29, -29, -33, 54,
	30, -9, -21, -20, 44, 30, 17, 18, -23, -22,
	11, 28, 19, 29, 10, -18, -22, -17, 30,
}

var yyDef = [...]int{
	0, -2, 1, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 45, 0, 0, 0, 0, 0, 2,
	3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
	0, 0, 0, 46, 0, 0, 0, 0, 67, 68,
	50, 0, 0, 0, 13, 0, 0, 56, 57, 58,
	0, 0, 0, 0, 71, 102, 103, 15, 0, 71,
	69, 51, 0, 0, 71, 62, 0, 65, 0, 19,
	16, 0, 0, 93, 0, 80, 0, 61, 0, 80,
	72, 0, 0, 0, 0, 0, 15, 45, 33, 34,
	35, 36, 0, 38, 39, 0, 66, 0, 70, 0,
	78, 81, 82, 83, 84, 85, 86, 99, 100, 101,
	0, 63, 64, 0, 0, 0, 80, 87, 88, 89,
	90, 91, 92, 77, 27, 0, 17, 42, 0, 0,
	94, 97, 98, 59, 80, 0, 75, 76, 73, 74,
	14, 30, 0, 18, 0, 0, 40, 41, 0, 21,
	24, 0, 0, 79, 80, 28, 29, 0, 0, 43,
	37, 0, 47, 23, 25, 26, 95, 96, 0, 0,
	20, 22, 52, 48, 0, 60, 31, 0, 44, 53,
	0, 0, 32, 0, 0, 0, 54, 55, 49,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	28, 30, 32, 3, 29, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 31,
	34, 33, 35,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 36, 37, 38, 39,
	40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
	60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:120
		{
			s := types.CreateDatabaseStatement{
				DatabaseId: yyDollar[3].str,
			}
			yylex.(*lexerWrapper).result = append(yylex.(*lexerWrapper).result, s)
		}
	case 14:
		yyDollar = yyS[yypt-8 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:129
		{
			s := types.CreateTableStatement{
				TableName:   yyDollar[3].str,
				Columns:     yyDollar[5].cols,
				PrimaryKeys: yyDollar[6].keys,
				Cluster:     yyDollar[8].clstr,
			}
			yylex.(*lexerWrapper).result = append(yylex.(*lexerWrapper).result, s)
		}
	case 15:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:141
		{
			yyVAL.cols = make([]types.Column, 0, 0)
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:145
		{
			yyVAL.cols = make([]types.Column, 0, 1)
			yyVAL.cols = append(yyVAL.cols, yyDollar[1].col)
		}
	case 17:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:150
		{
			yyVAL.cols = append(yyDollar[3].cols, yyDollar[1].col)
		}
	case 18:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:156
		{
			yyVAL.col = types.Column{Name: yyDollar[1].str, Type: yyDollar[2].coltype, Unique: yyDollar[3].flag, NotNull: yyDollar[4].flag}
		}
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:161
		{
			yyVAL.keys = make([]types.Key, 0, 1)
		}
	case 20:
		yyDollar = yyS[yypt-5 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:165
		{
			yyVAL.keys = yyDollar[4].keys
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:171
		{
			yyVAL.keys = make([]types.Key, 0, 1)
			yyVAL.keys = append(yyVAL.keys, yyDollar[1].key)
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:176
		{
			yyVAL.keys = append(yyDollar[1].keys, yyDollar[3].key)
		}
	case 23:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:182
		{
			yyVAL.key = types.Key{Name: yyDollar[1].str, KeyOrder: yyDollar[2].keyorder}
		}
	case 24:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:188
		{
			yyVAL.keyorder = types.Asc
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:192
		{
			yyVAL.keyorder = types.Asc
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:196
		{
			yyVAL.keyorder = types.Desc
		}
	case 27:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:202
		{
			yyVAL.clstr = types.Cluster{}
		}
	case 28:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:206
		{
			yyVAL.clstr = yyDollar[2].clstr
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:212
		{
			yyVAL.clstr = types.Cluster{OnDelete: yyDollar[1].ondelete}
		}
	case 30:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:218
		{
			// default
			yyVAL.ondelete = types.NoAction
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:223
		{
			yyVAL.ondelete = types.Cascade
		}
	case 32:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:227
		{
			yyVAL.ondelete = types.NoAction
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:233
		{
			yyVAL.coltype = yyDollar[1].coltype
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:240
		{
			yyVAL.coltype = types.ColumnType{TypeTag: types.Bool}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:244
		{
			yyVAL.coltype = types.ColumnType{TypeTag: types.Int64}
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:248
		{
			yyVAL.coltype = types.ColumnType{TypeTag: types.Float64}
		}
	case 37:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:253
		{
			yyVAL.coltype = types.ColumnType{TypeTag: types.Bytes, Length: yyDollar[3].int}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:257
		{
			yyVAL.coltype = types.ColumnType{TypeTag: types.Date}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:261
		{
			yyVAL.coltype = types.ColumnType{TypeTag: types.Timestamp}
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:267
		{
			yyVAL.int = yyDollar[1].int
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:271
		{
			yyVAL.int = 255
		}
	case 42:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:293
		{
			yyVAL.flag = types.False
		}
	case 43:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:297
		{
			yyVAL.flag = types.True
		}
	case 44:
		yyDollar = yyS[yypt-11 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:303
		{
			s := types.CreateIndexStatement{
				Unique:        yyDollar[2].flag,
				IndexName:     yyDollar[4].str,
				TableName:     yyDollar[6].str,
				Keys:          yyDollar[8].keys,
				StoringClause: yyDollar[10].stcls,
				Interleaves:   yyDollar[11].intlrs,
			}
			yylex.(*lexerWrapper).result = append(yylex.(*lexerWrapper).result, s)
		}
	case 45:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:317
		{
			yyVAL.flag = types.False
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:321
		{
			yyVAL.flag = types.True
		}
	case 47:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:328
		{
			yyVAL.stcls = types.StoringClause{}
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:332
		{
			yyVAL.stcls = yyDollar[1].stcls
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:338
		{
			yyVAL.stcls = types.StoringClause{ColumnNames: yyDollar[3].strs}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:344
		{
			yyVAL.strs = make([]string, 0, 1)
			yyVAL.strs = append(yyVAL.strs, yyDollar[1].str)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:349
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:355
		{
			yyVAL.intlrs = make([]types.Interleave, 0, 0)
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:359
		{
			yyVAL.intlrs = make([]types.Interleave, 0, 1)
			yyVAL.intlrs = append(yyVAL.intlrs, yyDollar[1].intlr)
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:364
		{
			yyVAL.intlrs = append(yyDollar[1].intlrs, yyDollar[3].intlr)
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:370
		{
			yyVAL.intlr = types.Interleave{TableName: yyDollar[3].str}
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:376
		{
			s := types.DropDatabaseStatement{
				DatabaseId: yyDollar[3].str,
			}
			yylex.(*lexerWrapper).result = append(yylex.(*lexerWrapper).result, s)
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:385
		{
			s := types.DropTableStatement{
				TableName: yyDollar[3].str,
			}
			yylex.(*lexerWrapper).result = append(yylex.(*lexerWrapper).result, s)
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:394
		{
			s := types.DropIndexStatement{
				IndexName: yyDollar[3].str,
			}
			yylex.(*lexerWrapper).result = append(yylex.(*lexerWrapper).result, s)
		}
	case 59:
		yyDollar = yyS[yypt-7 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:403
		{
			s := types.InsertStament{
				TableName:   yyDollar[3].str,
				ColumnNames: make([]string, 0, 0),
				Values:      yyDollar[6].valuetypelist,
			}
			yylex.(*lexerWrapper).result = append(yylex.(*lexerWrapper).result, s)
		}
	case 60:
		yyDollar = yyS[yypt-10 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:412
		{
			s := types.InsertStament{
				TableName:   yyDollar[3].str,
				ColumnNames: yyDollar[5].strs,
				Values:      yyDollar[9].valuetypelist,
			}
			yylex.(*lexerWrapper).result = append(yylex.(*lexerWrapper).result, s)
		}
	case 61:
		yyDollar = yyS[yypt-5 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:422
		{
			s := types.UpdateStament{
				TableName: yyDollar[2].str,
				SetExpr:   yyDollar[4].setexprlist,
				Where:     yyDollar[5].where,
			}
			yylex.(*lexerWrapper).result = append(yylex.(*lexerWrapper).result, s)
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:432
		{
			yyVAL.setexprlist = make([]types.SetExpr, 0, 1)
			yyVAL.setexprlist = append(yyVAL.setexprlist, yyDollar[1].setexpr)
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:437
		{
			yyVAL.setexprlist = append(yyDollar[1].setexprlist, yyDollar[3].setexpr)
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:442
		{
			yyVAL.setexpr = types.SetExpr{
				Left:  yyDollar[1].str,
				Right: yyDollar[3].valuetype,
			}
		}
	case 65:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:450
		{
			s := types.DeleteStatement{
				TableName: yyDollar[3].str,
				Where:     yyDollar[4].where,
			}
			yylex.(*lexerWrapper).result = append(yylex.(*lexerWrapper).result, s)
		}
	case 66:
		yyDollar = yyS[yypt-6 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:459
		{
			s := types.SelectStatement{
				Fields:     yyDollar[2].fieldsname,
				TableNames: yyDollar[4].strs,
				Where:      yyDollar[5].where,
				Limit:      yyDollar[6].limit,
			}
			yylex.(*lexerWrapper).result = append(yylex.(*lexerWrapper).result, s)
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:470
		{
			yyVAL.fieldsname = types.FieldsName{
				SelectAll: true,
			}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:476
		{
			yyVAL.fieldsname = types.FieldsName{
				SelectAll:   false,
				ColumnNames: yyDollar[1].strs,
			}
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:485
		{
			yyVAL.strs = make([]string, 0, 1)
			yyVAL.strs = append(yyVAL.strs, yyDollar[1].str)
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:490
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:495
		{
			yyVAL.where = nil
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:499
		{
			yyVAL.where = &types.Where{Expr: yyDollar[2].expr}
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:504
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:508
		{
			yyVAL.expr = &types.ComparisonExpr{Left: yyDollar[1].str, Operator: yyDollar[2].compare, Right: yyDollar[3].valuetype}
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:512
		{
			yyVAL.expr = &types.AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:516
		{
			yyVAL.expr = &types.OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:520
		{
			yyVAL.expr = &types.NotExpr{Expr: yyDollar[2].expr}
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:526
		{
			yyVAL.valuetypelist = make([]value.Value, 0, 1)
			yyVAL.valuetypelist = append(yyVAL.valuetypelist, yyDollar[1].valuetype)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:531
		{
			yyVAL.valuetypelist = append(yyDollar[1].valuetypelist, yyDollar[3].valuetype)
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:536
		{
			yyVAL.valuetype = value.Bytes{}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:540
		{
			yyVAL.valuetype = value.Bytes{Val: []byte(yyDollar[1].str)}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:544
		{
			yyVAL.valuetype = value.Int{Val: yyDollar[1].i64}
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:548
		{
			yyVAL.valuetype = value.Float{Val: yyDollar[1].f64}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:552
		{
			yyVAL.valuetype = value.Bool{Val: true}
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:556
		{
			yyVAL.valuetype = value.Bool{Val: false}
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:560
		{
			yyVAL.valuetype = value.Null{}
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:564
		{
			yyVAL.compare = value.Equal
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:565
		{
			yyVAL.compare = value.Less
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:566
		{
			yyVAL.compare = value.Great
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:567
		{
			yyVAL.compare = value.LessEqual
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:568
		{
			yyVAL.compare = value.GreatEqual
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:569
		{
			yyVAL.compare = value.NotEqual
		}
	case 93:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:573
		{
			yyVAL.limit = types.Limit{}
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:577
		{
			yyVAL.limit = types.Limit{Rowcount: yyDollar[2].int}
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:581
		{
			yyVAL.limit = types.Limit{Offset: yyDollar[2].int, Rowcount: yyDollar[4].int}
		}
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:585
		{
			yyVAL.limit = types.Limit{Offset: yyDollar[2].int, Rowcount: yyDollar[4].int}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:590
		{
			v, _ := strconv.Atoi(yyDollar[1].str)
			yyVAL.int = v
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:595
		{
			v, _ := strconv.ParseInt(yyDollar[1].str, 16, 32)
			yyVAL.int = int(v)
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:601
		{
			v, _ := strconv.ParseInt(yyDollar[1].str, 10, 64)
			yyVAL.i64 = v
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:606
		{
			v, _ := strconv.ParseInt(yyDollar[1].str, 16, 64)
			yyVAL.i64 = v
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:613
		{
			v, _ := strconv.ParseFloat(yyDollar[1].str, 0)
			yyVAL.f64 = v
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:620
		{
			yyVAL.str = yyDollar[1].str
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/Interpreter/parser/spanner.go.y:624
		{
			yyVAL.str = yyDollar[1].str
		}
	}
	goto yystack /* stack new state and value */
}
