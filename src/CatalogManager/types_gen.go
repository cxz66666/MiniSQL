package CatalogManager

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Cluster) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "TableName":
			z.TableName, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "TableName")
				return
			}
		case "OnDelete":
			{
				var zb0002 int
				zb0002, err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "OnDelete")
					return
				}
				z.OnDelete = OnDelete(zb0002)
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Cluster) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "TableName"
	err = en.Append(0x82, 0xa9, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.TableName)
	if err != nil {
		err = msgp.WrapError(err, "TableName")
		return
	}
	// write "OnDelete"
	err = en.Append(0xa8, 0x4f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(int(z.OnDelete))
	if err != nil {
		err = msgp.WrapError(err, "OnDelete")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Cluster) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "TableName"
	o = append(o, 0x82, 0xa9, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.TableName)
	// string "OnDelete"
	o = append(o, 0xa8, 0x4f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65)
	o = msgp.AppendInt(o, int(z.OnDelete))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Cluster) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "TableName":
			z.TableName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TableName")
				return
			}
		case "OnDelete":
			{
				var zb0002 int
				zb0002, bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "OnDelete")
					return
				}
				z.OnDelete = OnDelete(zb0002)
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Cluster) Msgsize() (s int) {
	s = 1 + 10 + msgp.StringPrefixSize + len(z.TableName) + 9 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Column) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Name":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "Type":
			err = z.Type.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Type")
				return
			}
		case "Unique":
			z.Unique, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Unique")
				return
			}
		case "NotNull":
			z.NotNull, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "NotNull")
				return
			}
		case "ColumnPos":
			z.ColumnPos, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "ColumnPos")
				return
			}
		case "StartBytesPos":
			z.StartBytesPos, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "StartBytesPos")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Column) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 6
	// write "Name"
	err = en.Append(0x86, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// write "Type"
	err = en.Append(0xa4, 0x54, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = z.Type.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Type")
		return
	}
	// write "Unique"
	err = en.Append(0xa6, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Unique)
	if err != nil {
		err = msgp.WrapError(err, "Unique")
		return
	}
	// write "NotNull"
	err = en.Append(0xa7, 0x4e, 0x6f, 0x74, 0x4e, 0x75, 0x6c, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteBool(z.NotNull)
	if err != nil {
		err = msgp.WrapError(err, "NotNull")
		return
	}
	// write "ColumnPos"
	err = en.Append(0xa9, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x50, 0x6f, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt(z.ColumnPos)
	if err != nil {
		err = msgp.WrapError(err, "ColumnPos")
		return
	}
	// write "StartBytesPos"
	err = en.Append(0xad, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50, 0x6f, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt(z.StartBytesPos)
	if err != nil {
		err = msgp.WrapError(err, "StartBytesPos")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Column) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "Name"
	o = append(o, 0x86, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Name)
	// string "Type"
	o = append(o, 0xa4, 0x54, 0x79, 0x70, 0x65)
	o, err = z.Type.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Type")
		return
	}
	// string "Unique"
	o = append(o, 0xa6, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65)
	o = msgp.AppendBool(o, z.Unique)
	// string "NotNull"
	o = append(o, 0xa7, 0x4e, 0x6f, 0x74, 0x4e, 0x75, 0x6c, 0x6c)
	o = msgp.AppendBool(o, z.NotNull)
	// string "ColumnPos"
	o = append(o, 0xa9, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x50, 0x6f, 0x73)
	o = msgp.AppendInt(o, z.ColumnPos)
	// string "StartBytesPos"
	o = append(o, 0xad, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50, 0x6f, 0x73)
	o = msgp.AppendInt(o, z.StartBytesPos)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Column) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Name":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "Type":
			bts, err = z.Type.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Type")
				return
			}
		case "Unique":
			z.Unique, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Unique")
				return
			}
		case "NotNull":
			z.NotNull, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NotNull")
				return
			}
		case "ColumnPos":
			z.ColumnPos, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ColumnPos")
				return
			}
		case "StartBytesPos":
			z.StartBytesPos, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "StartBytesPos")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Column) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.Name) + 5 + z.Type.Msgsize() + 7 + msgp.BoolSize + 8 + msgp.BoolSize + 10 + msgp.IntSize + 14 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ColumnType) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "TypeTag":
			{
				var zb0002 int
				zb0002, err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "TypeTag")
					return
				}
				z.TypeTag = ScalarColumnTypeTag(zb0002)
			}
		case "Length":
			z.Length, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Length")
				return
			}
		case "IsArray":
			z.IsArray, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "IsArray")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z ColumnType) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "TypeTag"
	err = en.Append(0x83, 0xa7, 0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x67)
	if err != nil {
		return
	}
	err = en.WriteInt(int(z.TypeTag))
	if err != nil {
		err = msgp.WrapError(err, "TypeTag")
		return
	}
	// write "Length"
	err = en.Append(0xa6, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Length)
	if err != nil {
		err = msgp.WrapError(err, "Length")
		return
	}
	// write "IsArray"
	err = en.Append(0xa7, 0x49, 0x73, 0x41, 0x72, 0x72, 0x61, 0x79)
	if err != nil {
		return
	}
	err = en.WriteBool(z.IsArray)
	if err != nil {
		err = msgp.WrapError(err, "IsArray")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ColumnType) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "TypeTag"
	o = append(o, 0x83, 0xa7, 0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x67)
	o = msgp.AppendInt(o, int(z.TypeTag))
	// string "Length"
	o = append(o, 0xa6, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68)
	o = msgp.AppendInt(o, z.Length)
	// string "IsArray"
	o = append(o, 0xa7, 0x49, 0x73, 0x41, 0x72, 0x72, 0x61, 0x79)
	o = msgp.AppendBool(o, z.IsArray)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ColumnType) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "TypeTag":
			{
				var zb0002 int
				zb0002, bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TypeTag")
					return
				}
				z.TypeTag = ScalarColumnTypeTag(zb0002)
			}
		case "Length":
			z.Length, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Length")
				return
			}
		case "IsArray":
			z.IsArray, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IsArray")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ColumnType) Msgsize() (s int) {
	s = 1 + 8 + msgp.IntSize + 7 + msgp.IntSize + 8 + msgp.BoolSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *DatabaseCatalog) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "DatabaseId":
			z.DatabaseId, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "DatabaseId")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z DatabaseCatalog) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "DatabaseId"
	err = en.Append(0x81, 0xaa, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.DatabaseId)
	if err != nil {
		err = msgp.WrapError(err, "DatabaseId")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z DatabaseCatalog) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "DatabaseId"
	o = append(o, 0x81, 0xaa, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x49, 0x64)
	o = msgp.AppendString(o, z.DatabaseId)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *DatabaseCatalog) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "DatabaseId":
			z.DatabaseId, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DatabaseId")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z DatabaseCatalog) Msgsize() (s int) {
	s = 1 + 11 + msgp.StringPrefixSize + len(z.DatabaseId)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *IndexCatalog) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "IndexName":
			z.IndexName, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "IndexName")
				return
			}
		case "Unique":
			z.Unique, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Unique")
				return
			}
		case "Keys":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Keys")
				return
			}
			if cap(z.Keys) >= int(zb0002) {
				z.Keys = (z.Keys)[:zb0002]
			} else {
				z.Keys = make([]Key, zb0002)
			}
			for za0001 := range z.Keys {
				var zb0003 uint32
				zb0003, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Keys", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "Keys", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "Name":
						z.Keys[za0001].Name, err = dc.ReadString()
						if err != nil {
							err = msgp.WrapError(err, "Keys", za0001, "Name")
							return
						}
					case "KeyOrder":
						{
							var zb0004 int
							zb0004, err = dc.ReadInt()
							if err != nil {
								err = msgp.WrapError(err, "Keys", za0001, "KeyOrder")
								return
							}
							z.Keys[za0001].KeyOrder = KeyOrder(zb0004)
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "Keys", za0001)
							return
						}
					}
				}
			}
		case "StoringClause":
			var zb0005 uint32
			zb0005, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "StoringClause")
				return
			}
			for zb0005 > 0 {
				zb0005--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "StoringClause")
					return
				}
				switch msgp.UnsafeString(field) {
				case "ColumnNames":
					var zb0006 uint32
					zb0006, err = dc.ReadArrayHeader()
					if err != nil {
						err = msgp.WrapError(err, "StoringClause", "ColumnNames")
						return
					}
					if cap(z.StoringClause.ColumnNames) >= int(zb0006) {
						z.StoringClause.ColumnNames = (z.StoringClause.ColumnNames)[:zb0006]
					} else {
						z.StoringClause.ColumnNames = make([]string, zb0006)
					}
					for za0002 := range z.StoringClause.ColumnNames {
						z.StoringClause.ColumnNames[za0002], err = dc.ReadString()
						if err != nil {
							err = msgp.WrapError(err, "StoringClause", "ColumnNames", za0002)
							return
						}
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "StoringClause")
						return
					}
				}
			}
		case "Interleaves":
			var zb0007 uint32
			zb0007, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Interleaves")
				return
			}
			if cap(z.Interleaves) >= int(zb0007) {
				z.Interleaves = (z.Interleaves)[:zb0007]
			} else {
				z.Interleaves = make([]Interleave, zb0007)
			}
			for za0003 := range z.Interleaves {
				var zb0008 uint32
				zb0008, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Interleaves", za0003)
					return
				}
				for zb0008 > 0 {
					zb0008--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "Interleaves", za0003)
						return
					}
					switch msgp.UnsafeString(field) {
					case "TableName":
						z.Interleaves[za0003].TableName, err = dc.ReadString()
						if err != nil {
							err = msgp.WrapError(err, "Interleaves", za0003, "TableName")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "Interleaves", za0003)
							return
						}
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *IndexCatalog) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "IndexName"
	err = en.Append(0x85, 0xa9, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.IndexName)
	if err != nil {
		err = msgp.WrapError(err, "IndexName")
		return
	}
	// write "Unique"
	err = en.Append(0xa6, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Unique)
	if err != nil {
		err = msgp.WrapError(err, "Unique")
		return
	}
	// write "Keys"
	err = en.Append(0xa4, 0x4b, 0x65, 0x79, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Keys)))
	if err != nil {
		err = msgp.WrapError(err, "Keys")
		return
	}
	for za0001 := range z.Keys {
		// map header, size 2
		// write "Name"
		err = en.Append(0x82, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
		if err != nil {
			return
		}
		err = en.WriteString(z.Keys[za0001].Name)
		if err != nil {
			err = msgp.WrapError(err, "Keys", za0001, "Name")
			return
		}
		// write "KeyOrder"
		err = en.Append(0xa8, 0x4b, 0x65, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72)
		if err != nil {
			return
		}
		err = en.WriteInt(int(z.Keys[za0001].KeyOrder))
		if err != nil {
			err = msgp.WrapError(err, "Keys", za0001, "KeyOrder")
			return
		}
	}
	// write "StoringClause"
	err = en.Append(0xad, 0x53, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65)
	if err != nil {
		return
	}
	// map header, size 1
	// write "ColumnNames"
	err = en.Append(0x81, 0xab, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.StoringClause.ColumnNames)))
	if err != nil {
		err = msgp.WrapError(err, "StoringClause", "ColumnNames")
		return
	}
	for za0002 := range z.StoringClause.ColumnNames {
		err = en.WriteString(z.StoringClause.ColumnNames[za0002])
		if err != nil {
			err = msgp.WrapError(err, "StoringClause", "ColumnNames", za0002)
			return
		}
	}
	// write "Interleaves"
	err = en.Append(0xab, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Interleaves)))
	if err != nil {
		err = msgp.WrapError(err, "Interleaves")
		return
	}
	for za0003 := range z.Interleaves {
		// map header, size 1
		// write "TableName"
		err = en.Append(0x81, 0xa9, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65)
		if err != nil {
			return
		}
		err = en.WriteString(z.Interleaves[za0003].TableName)
		if err != nil {
			err = msgp.WrapError(err, "Interleaves", za0003, "TableName")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *IndexCatalog) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "IndexName"
	o = append(o, 0x85, 0xa9, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.IndexName)
	// string "Unique"
	o = append(o, 0xa6, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65)
	o = msgp.AppendBool(o, z.Unique)
	// string "Keys"
	o = append(o, 0xa4, 0x4b, 0x65, 0x79, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Keys)))
	for za0001 := range z.Keys {
		// map header, size 2
		// string "Name"
		o = append(o, 0x82, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
		o = msgp.AppendString(o, z.Keys[za0001].Name)
		// string "KeyOrder"
		o = append(o, 0xa8, 0x4b, 0x65, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72)
		o = msgp.AppendInt(o, int(z.Keys[za0001].KeyOrder))
	}
	// string "StoringClause"
	o = append(o, 0xad, 0x53, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65)
	// map header, size 1
	// string "ColumnNames"
	o = append(o, 0x81, 0xab, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.StoringClause.ColumnNames)))
	for za0002 := range z.StoringClause.ColumnNames {
		o = msgp.AppendString(o, z.StoringClause.ColumnNames[za0002])
	}
	// string "Interleaves"
	o = append(o, 0xab, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Interleaves)))
	for za0003 := range z.Interleaves {
		// map header, size 1
		// string "TableName"
		o = append(o, 0x81, 0xa9, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65)
		o = msgp.AppendString(o, z.Interleaves[za0003].TableName)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *IndexCatalog) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "IndexName":
			z.IndexName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IndexName")
				return
			}
		case "Unique":
			z.Unique, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Unique")
				return
			}
		case "Keys":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Keys")
				return
			}
			if cap(z.Keys) >= int(zb0002) {
				z.Keys = (z.Keys)[:zb0002]
			} else {
				z.Keys = make([]Key, zb0002)
			}
			for za0001 := range z.Keys {
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Keys", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "Keys", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "Name":
						z.Keys[za0001].Name, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Keys", za0001, "Name")
							return
						}
					case "KeyOrder":
						{
							var zb0004 int
							zb0004, bts, err = msgp.ReadIntBytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "Keys", za0001, "KeyOrder")
								return
							}
							z.Keys[za0001].KeyOrder = KeyOrder(zb0004)
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "Keys", za0001)
							return
						}
					}
				}
			}
		case "StoringClause":
			var zb0005 uint32
			zb0005, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "StoringClause")
				return
			}
			for zb0005 > 0 {
				zb0005--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "StoringClause")
					return
				}
				switch msgp.UnsafeString(field) {
				case "ColumnNames":
					var zb0006 uint32
					zb0006, bts, err = msgp.ReadArrayHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "StoringClause", "ColumnNames")
						return
					}
					if cap(z.StoringClause.ColumnNames) >= int(zb0006) {
						z.StoringClause.ColumnNames = (z.StoringClause.ColumnNames)[:zb0006]
					} else {
						z.StoringClause.ColumnNames = make([]string, zb0006)
					}
					for za0002 := range z.StoringClause.ColumnNames {
						z.StoringClause.ColumnNames[za0002], bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "StoringClause", "ColumnNames", za0002)
							return
						}
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "StoringClause")
						return
					}
				}
			}
		case "Interleaves":
			var zb0007 uint32
			zb0007, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Interleaves")
				return
			}
			if cap(z.Interleaves) >= int(zb0007) {
				z.Interleaves = (z.Interleaves)[:zb0007]
			} else {
				z.Interleaves = make([]Interleave, zb0007)
			}
			for za0003 := range z.Interleaves {
				var zb0008 uint32
				zb0008, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Interleaves", za0003)
					return
				}
				for zb0008 > 0 {
					zb0008--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "Interleaves", za0003)
						return
					}
					switch msgp.UnsafeString(field) {
					case "TableName":
						z.Interleaves[za0003].TableName, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Interleaves", za0003, "TableName")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "Interleaves", za0003)
							return
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *IndexCatalog) Msgsize() (s int) {
	s = 1 + 10 + msgp.StringPrefixSize + len(z.IndexName) + 7 + msgp.BoolSize + 5 + msgp.ArrayHeaderSize
	for za0001 := range z.Keys {
		s += 1 + 5 + msgp.StringPrefixSize + len(z.Keys[za0001].Name) + 9 + msgp.IntSize
	}
	s += 14 + 1 + 12 + msgp.ArrayHeaderSize
	for za0002 := range z.StoringClause.ColumnNames {
		s += msgp.StringPrefixSize + len(z.StoringClause.ColumnNames[za0002])
	}
	s += 12 + msgp.ArrayHeaderSize
	for za0003 := range z.Interleaves {
		s += 1 + 10 + msgp.StringPrefixSize + len(z.Interleaves[za0003].TableName)
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Interleave) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "TableName":
			z.TableName, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "TableName")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Interleave) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "TableName"
	err = en.Append(0x81, 0xa9, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.TableName)
	if err != nil {
		err = msgp.WrapError(err, "TableName")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Interleave) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "TableName"
	o = append(o, 0x81, 0xa9, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.TableName)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Interleave) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "TableName":
			z.TableName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TableName")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Interleave) Msgsize() (s int) {
	s = 1 + 10 + msgp.StringPrefixSize + len(z.TableName)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Key) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Name":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "KeyOrder":
			{
				var zb0002 int
				zb0002, err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "KeyOrder")
					return
				}
				z.KeyOrder = KeyOrder(zb0002)
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Key) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Name"
	err = en.Append(0x82, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// write "KeyOrder"
	err = en.Append(0xa8, 0x4b, 0x65, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteInt(int(z.KeyOrder))
	if err != nil {
		err = msgp.WrapError(err, "KeyOrder")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Key) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Name"
	o = append(o, 0x82, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Name)
	// string "KeyOrder"
	o = append(o, 0xa8, 0x4b, 0x65, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72)
	o = msgp.AppendInt(o, int(z.KeyOrder))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Key) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Name":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "KeyOrder":
			{
				var zb0002 int
				zb0002, bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "KeyOrder")
					return
				}
				z.KeyOrder = KeyOrder(zb0002)
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Key) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.Name) + 9 + msgp.IntSize
	return
}



// DecodeMsg implements msgp.Decodable
func (z *MiniSqlCatalog) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Databases":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Databases")
				return
			}
			if cap(z.Databases) >= int(zb0002) {
				z.Databases = (z.Databases)[:zb0002]
			} else {
				z.Databases = make([]DatabaseCatalog, zb0002)
			}
			for za0001 := range z.Databases {
				var zb0003 uint32
				zb0003, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Databases", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "Databases", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "DatabaseId":
						z.Databases[za0001].DatabaseId, err = dc.ReadString()
						if err != nil {
							err = msgp.WrapError(err, "Databases", za0001, "DatabaseId")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "Databases", za0001)
							return
						}
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MiniSqlCatalog) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "Databases"
	err = en.Append(0x81, 0xa9, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Databases)))
	if err != nil {
		err = msgp.WrapError(err, "Databases")
		return
	}
	for za0001 := range z.Databases {
		// map header, size 1
		// write "DatabaseId"
		err = en.Append(0x81, 0xaa, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x49, 0x64)
		if err != nil {
			return
		}
		err = en.WriteString(z.Databases[za0001].DatabaseId)
		if err != nil {
			err = msgp.WrapError(err, "Databases", za0001, "DatabaseId")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MiniSqlCatalog) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "Databases"
	o = append(o, 0x81, 0xa9, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Databases)))
	for za0001 := range z.Databases {
		// map header, size 1
		// string "DatabaseId"
		o = append(o, 0x81, 0xaa, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x49, 0x64)
		o = msgp.AppendString(o, z.Databases[za0001].DatabaseId)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MiniSqlCatalog) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Databases":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Databases")
				return
			}
			if cap(z.Databases) >= int(zb0002) {
				z.Databases = (z.Databases)[:zb0002]
			} else {
				z.Databases = make([]DatabaseCatalog, zb0002)
			}
			for za0001 := range z.Databases {
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Databases", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "Databases", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "DatabaseId":
						z.Databases[za0001].DatabaseId, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Databases", za0001, "DatabaseId")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "Databases", za0001)
							return
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MiniSqlCatalog) Msgsize() (s int) {
	s = 1 + 10 + msgp.ArrayHeaderSize
	for za0001 := range z.Databases {
		s += 1 + 11 + msgp.StringPrefixSize + len(z.Databases[za0001].DatabaseId)
	}
	return
}


// DecodeMsg implements msgp.Decodable
func (z *StoringClause) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ColumnNames":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "ColumnNames")
				return
			}
			if cap(z.ColumnNames) >= int(zb0002) {
				z.ColumnNames = (z.ColumnNames)[:zb0002]
			} else {
				z.ColumnNames = make([]string, zb0002)
			}
			for za0001 := range z.ColumnNames {
				z.ColumnNames[za0001], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "ColumnNames", za0001)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *StoringClause) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "ColumnNames"
	err = en.Append(0x81, 0xab, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.ColumnNames)))
	if err != nil {
		err = msgp.WrapError(err, "ColumnNames")
		return
	}
	for za0001 := range z.ColumnNames {
		err = en.WriteString(z.ColumnNames[za0001])
		if err != nil {
			err = msgp.WrapError(err, "ColumnNames", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *StoringClause) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "ColumnNames"
	o = append(o, 0x81, 0xab, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.ColumnNames)))
	for za0001 := range z.ColumnNames {
		o = msgp.AppendString(o, z.ColumnNames[za0001])
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *StoringClause) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ColumnNames":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ColumnNames")
				return
			}
			if cap(z.ColumnNames) >= int(zb0002) {
				z.ColumnNames = (z.ColumnNames)[:zb0002]
			} else {
				z.ColumnNames = make([]string, zb0002)
			}
			for za0001 := range z.ColumnNames {
				z.ColumnNames[za0001], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ColumnNames", za0001)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *StoringClause) Msgsize() (s int) {
	s = 1 + 12 + msgp.ArrayHeaderSize
	for za0001 := range z.ColumnNames {
		s += msgp.StringPrefixSize + len(z.ColumnNames[za0001])
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *TableCatalog) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "TableName":
			z.TableName, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "TableName")
				return
			}
		case "ColumnsMap":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "ColumnsMap")
				return
			}
			if z.ColumnsMap == nil {
				z.ColumnsMap = make(map[string]Column, zb0002)
			} else if len(z.ColumnsMap) > 0 {
				for key := range z.ColumnsMap {
					delete(z.ColumnsMap, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 Column
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "ColumnsMap")
					return
				}
				err = za0002.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "ColumnsMap", za0001)
					return
				}
				z.ColumnsMap[za0001] = za0002
			}
		case "PrimaryKeys":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "PrimaryKeys")
				return
			}
			if cap(z.PrimaryKeys) >= int(zb0003) {
				z.PrimaryKeys = (z.PrimaryKeys)[:zb0003]
			} else {
				z.PrimaryKeys = make([]Key, zb0003)
			}
			for za0003 := range z.PrimaryKeys {
				var zb0004 uint32
				zb0004, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "PrimaryKeys", za0003)
					return
				}
				for zb0004 > 0 {
					zb0004--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "PrimaryKeys", za0003)
						return
					}
					switch msgp.UnsafeString(field) {
					case "Name":
						z.PrimaryKeys[za0003].Name, err = dc.ReadString()
						if err != nil {
							err = msgp.WrapError(err, "PrimaryKeys", za0003, "Name")
							return
						}
					case "KeyOrder":
						{
							var zb0005 int
							zb0005, err = dc.ReadInt()
							if err != nil {
								err = msgp.WrapError(err, "PrimaryKeys", za0003, "KeyOrder")
								return
							}
							z.PrimaryKeys[za0003].KeyOrder = KeyOrder(zb0005)
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "PrimaryKeys", za0003)
							return
						}
					}
				}
			}
		case "Cluster":
			var zb0006 uint32
			zb0006, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Cluster")
				return
			}
			for zb0006 > 0 {
				zb0006--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "Cluster")
					return
				}
				switch msgp.UnsafeString(field) {
				case "TableName":
					z.Cluster.TableName, err = dc.ReadString()
					if err != nil {
						err = msgp.WrapError(err, "Cluster", "TableName")
						return
					}
				case "OnDelete":
					{
						var zb0007 int
						zb0007, err = dc.ReadInt()
						if err != nil {
							err = msgp.WrapError(err, "Cluster", "OnDelete")
							return
						}
						z.Cluster.OnDelete = OnDelete(zb0007)
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "Cluster")
						return
					}
				}
			}
		case "Indexs":
			var zb0008 uint32
			zb0008, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Indexs")
				return
			}
			if cap(z.Indexs) >= int(zb0008) {
				z.Indexs = (z.Indexs)[:zb0008]
			} else {
				z.Indexs = make([]IndexCatalog, zb0008)
			}
			for za0004 := range z.Indexs {
				err = z.Indexs[za0004].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Indexs", za0004)
					return
				}
			}
		case "RecordCnt":
			z.RecordCnt, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "RecordCnt")
				return
			}
		case "RecordTotal":
			z.RecordTotal, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "RecordTotal")
				return
			}
		case "RecordLength":
			z.RecordLength, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "RecordLength")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *TableCatalog) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 8
	// write "TableName"
	err = en.Append(0x88, 0xa9, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.TableName)
	if err != nil {
		err = msgp.WrapError(err, "TableName")
		return
	}
	// write "ColumnsMap"
	err = en.Append(0xaa, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x4d, 0x61, 0x70)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.ColumnsMap)))
	if err != nil {
		err = msgp.WrapError(err, "ColumnsMap")
		return
	}
	for za0001, za0002 := range z.ColumnsMap {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "ColumnsMap")
			return
		}
		err = za0002.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "ColumnsMap", za0001)
			return
		}
	}
	// write "PrimaryKeys"
	err = en.Append(0xab, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.PrimaryKeys)))
	if err != nil {
		err = msgp.WrapError(err, "PrimaryKeys")
		return
	}
	for za0003 := range z.PrimaryKeys {
		// map header, size 2
		// write "Name"
		err = en.Append(0x82, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
		if err != nil {
			return
		}
		err = en.WriteString(z.PrimaryKeys[za0003].Name)
		if err != nil {
			err = msgp.WrapError(err, "PrimaryKeys", za0003, "Name")
			return
		}
		// write "KeyOrder"
		err = en.Append(0xa8, 0x4b, 0x65, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72)
		if err != nil {
			return
		}
		err = en.WriteInt(int(z.PrimaryKeys[za0003].KeyOrder))
		if err != nil {
			err = msgp.WrapError(err, "PrimaryKeys", za0003, "KeyOrder")
			return
		}
	}
	// write "Cluster"
	err = en.Append(0xa7, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72)
	if err != nil {
		return
	}
	// map header, size 2
	// write "TableName"
	err = en.Append(0x82, 0xa9, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Cluster.TableName)
	if err != nil {
		err = msgp.WrapError(err, "Cluster", "TableName")
		return
	}
	// write "OnDelete"
	err = en.Append(0xa8, 0x4f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(int(z.Cluster.OnDelete))
	if err != nil {
		err = msgp.WrapError(err, "Cluster", "OnDelete")
		return
	}
	// write "Indexs"
	err = en.Append(0xa6, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Indexs)))
	if err != nil {
		err = msgp.WrapError(err, "Indexs")
		return
	}
	for za0004 := range z.Indexs {
		err = z.Indexs[za0004].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Indexs", za0004)
			return
		}
	}
	// write "RecordCnt"
	err = en.Append(0xa9, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.RecordCnt)
	if err != nil {
		err = msgp.WrapError(err, "RecordCnt")
		return
	}
	// write "RecordTotal"
	err = en.Append(0xab, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteInt(z.RecordTotal)
	if err != nil {
		err = msgp.WrapError(err, "RecordTotal")
		return
	}
	// write "RecordLength"
	err = en.Append(0xac, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68)
	if err != nil {
		return
	}
	err = en.WriteInt(z.RecordLength)
	if err != nil {
		err = msgp.WrapError(err, "RecordLength")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *TableCatalog) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 8
	// string "TableName"
	o = append(o, 0x88, 0xa9, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.TableName)
	// string "ColumnsMap"
	o = append(o, 0xaa, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x4d, 0x61, 0x70)
	o = msgp.AppendMapHeader(o, uint32(len(z.ColumnsMap)))
	for za0001, za0002 := range z.ColumnsMap {
		o = msgp.AppendString(o, za0001)
		o, err = za0002.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "ColumnsMap", za0001)
			return
		}
	}
	// string "PrimaryKeys"
	o = append(o, 0xab, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.PrimaryKeys)))
	for za0003 := range z.PrimaryKeys {
		// map header, size 2
		// string "Name"
		o = append(o, 0x82, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
		o = msgp.AppendString(o, z.PrimaryKeys[za0003].Name)
		// string "KeyOrder"
		o = append(o, 0xa8, 0x4b, 0x65, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72)
		o = msgp.AppendInt(o, int(z.PrimaryKeys[za0003].KeyOrder))
	}
	// string "Cluster"
	o = append(o, 0xa7, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72)
	// map header, size 2
	// string "TableName"
	o = append(o, 0x82, 0xa9, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Cluster.TableName)
	// string "OnDelete"
	o = append(o, 0xa8, 0x4f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65)
	o = msgp.AppendInt(o, int(z.Cluster.OnDelete))
	// string "Indexs"
	o = append(o, 0xa6, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Indexs)))
	for za0004 := range z.Indexs {
		o, err = z.Indexs[za0004].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Indexs", za0004)
			return
		}
	}
	// string "RecordCnt"
	o = append(o, 0xa9, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x6e, 0x74)
	o = msgp.AppendInt(o, z.RecordCnt)
	// string "RecordTotal"
	o = append(o, 0xab, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c)
	o = msgp.AppendInt(o, z.RecordTotal)
	// string "RecordLength"
	o = append(o, 0xac, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68)
	o = msgp.AppendInt(o, z.RecordLength)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TableCatalog) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "TableName":
			z.TableName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TableName")
				return
			}
		case "ColumnsMap":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ColumnsMap")
				return
			}
			if z.ColumnsMap == nil {
				z.ColumnsMap = make(map[string]Column, zb0002)
			} else if len(z.ColumnsMap) > 0 {
				for key := range z.ColumnsMap {
					delete(z.ColumnsMap, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 Column
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ColumnsMap")
					return
				}
				bts, err = za0002.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "ColumnsMap", za0001)
					return
				}
				z.ColumnsMap[za0001] = za0002
			}
		case "PrimaryKeys":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PrimaryKeys")
				return
			}
			if cap(z.PrimaryKeys) >= int(zb0003) {
				z.PrimaryKeys = (z.PrimaryKeys)[:zb0003]
			} else {
				z.PrimaryKeys = make([]Key, zb0003)
			}
			for za0003 := range z.PrimaryKeys {
				var zb0004 uint32
				zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "PrimaryKeys", za0003)
					return
				}
				for zb0004 > 0 {
					zb0004--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "PrimaryKeys", za0003)
						return
					}
					switch msgp.UnsafeString(field) {
					case "Name":
						z.PrimaryKeys[za0003].Name, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "PrimaryKeys", za0003, "Name")
							return
						}
					case "KeyOrder":
						{
							var zb0005 int
							zb0005, bts, err = msgp.ReadIntBytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "PrimaryKeys", za0003, "KeyOrder")
								return
							}
							z.PrimaryKeys[za0003].KeyOrder = KeyOrder(zb0005)
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "PrimaryKeys", za0003)
							return
						}
					}
				}
			}
		case "Cluster":
			var zb0006 uint32
			zb0006, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Cluster")
				return
			}
			for zb0006 > 0 {
				zb0006--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "Cluster")
					return
				}
				switch msgp.UnsafeString(field) {
				case "TableName":
					z.Cluster.TableName, bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Cluster", "TableName")
						return
					}
				case "OnDelete":
					{
						var zb0007 int
						zb0007, bts, err = msgp.ReadIntBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Cluster", "OnDelete")
							return
						}
						z.Cluster.OnDelete = OnDelete(zb0007)
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "Cluster")
						return
					}
				}
			}
		case "Indexs":
			var zb0008 uint32
			zb0008, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Indexs")
				return
			}
			if cap(z.Indexs) >= int(zb0008) {
				z.Indexs = (z.Indexs)[:zb0008]
			} else {
				z.Indexs = make([]IndexCatalog, zb0008)
			}
			for za0004 := range z.Indexs {
				bts, err = z.Indexs[za0004].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Indexs", za0004)
					return
				}
			}
		case "RecordCnt":
			z.RecordCnt, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RecordCnt")
				return
			}
		case "RecordTotal":
			z.RecordTotal, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RecordTotal")
				return
			}
		case "RecordLength":
			z.RecordLength, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RecordLength")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *TableCatalog) Msgsize() (s int) {
	s = 1 + 10 + msgp.StringPrefixSize + len(z.TableName) + 11 + msgp.MapHeaderSize
	if z.ColumnsMap != nil {
		for za0001, za0002 := range z.ColumnsMap {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + za0002.Msgsize()
		}
	}
	s += 12 + msgp.ArrayHeaderSize
	for za0003 := range z.PrimaryKeys {
		s += 1 + 5 + msgp.StringPrefixSize + len(z.PrimaryKeys[za0003].Name) + 9 + msgp.IntSize
	}
	s += 8 + 1 + 10 + msgp.StringPrefixSize + len(z.Cluster.TableName) + 9 + msgp.IntSize + 7 + msgp.ArrayHeaderSize
	for za0004 := range z.Indexs {
		s += z.Indexs[za0004].Msgsize()
	}
	s += 10 + msgp.IntSize + 12 + msgp.IntSize + 13 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *TableCatalogMap) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0003 uint32
	zb0003, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if (*z) == nil {
		(*z) = make(TableCatalogMap, zb0003)
	} else if len((*z)) > 0 {
		for key := range *z {
			delete((*z), key)
		}
	}
	for zb0003 > 0 {
		zb0003--
		var zb0001 string
		var zb0002 *TableCatalog
		zb0001, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if dc.IsNil() {
			err = dc.ReadNil()
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
			zb0002 = nil
		} else {
			if zb0002 == nil {
				zb0002 = new(TableCatalog)
			}
			err = zb0002.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
		}
		(*z)[zb0001] = zb0002
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z TableCatalogMap) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteMapHeader(uint32(len(z)))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0004, zb0005 := range z {
		err = en.WriteString(zb0004)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0005 == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = zb0005.EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, zb0004)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z TableCatalogMap) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendMapHeader(o, uint32(len(z)))
	for zb0004, zb0005 := range z {
		o = msgp.AppendString(o, zb0004)
		if zb0005 == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = zb0005.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, zb0004)
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TableCatalogMap) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0003 uint32
	zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if (*z) == nil {
		(*z) = make(TableCatalogMap, zb0003)
	} else if len((*z)) > 0 {
		for key := range *z {
			delete((*z), key)
		}
	}
	for zb0003 > 0 {
		var zb0001 string
		var zb0002 *TableCatalog
		zb0003--
		zb0001, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if msgp.IsNil(bts) {
			bts, err = msgp.ReadNilBytes(bts)
			if err != nil {
				return
			}
			zb0002 = nil
		} else {
			if zb0002 == nil {
				zb0002 = new(TableCatalog)
			}
			bts, err = zb0002.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
		}
		(*z)[zb0001] = zb0002
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z TableCatalogMap) Msgsize() (s int) {
	s = msgp.MapHeaderSize
	if z != nil {
		for zb0004, zb0005 := range z {
			_ = zb0005
			s += msgp.StringPrefixSize + len(zb0004)
			if zb0005 == nil {
				s += msgp.NilSize
			} else {
				s += zb0005.Msgsize()
			}
		}
	}
	return
}
