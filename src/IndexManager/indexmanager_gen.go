package IndexManager

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *FreeList) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Name":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "Positions":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Positions")
				return
			}
			if cap(z.Positions) >= int(zb0002) {
				z.Positions = (z.Positions)[:zb0002]
			} else {
				z.Positions = make([]Position, zb0002)
			}
			for za0001 := range z.Positions {
				var zb0003 uint32
				zb0003, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Positions", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "Positions", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "Block":
						z.Positions[za0001].Block, err = dc.ReadUint16()
						if err != nil {
							err = msgp.WrapError(err, "Positions", za0001, "Block")
							return
						}
					case "Offset":
						z.Positions[za0001].Offset, err = dc.ReadUint16()
						if err != nil {
							err = msgp.WrapError(err, "Positions", za0001, "Offset")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "Positions", za0001)
							return
						}
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *FreeList) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Name"
	err = en.Append(0x82, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// write "Positions"
	err = en.Append(0xa9, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Positions)))
	if err != nil {
		err = msgp.WrapError(err, "Positions")
		return
	}
	for za0001 := range z.Positions {
		// map header, size 2
		// write "Block"
		err = en.Append(0x82, 0xa5, 0x42, 0x6c, 0x6f, 0x63, 0x6b)
		if err != nil {
			return
		}
		err = en.WriteUint16(z.Positions[za0001].Block)
		if err != nil {
			err = msgp.WrapError(err, "Positions", za0001, "Block")
			return
		}
		// write "Offset"
		err = en.Append(0xa6, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74)
		if err != nil {
			return
		}
		err = en.WriteUint16(z.Positions[za0001].Offset)
		if err != nil {
			err = msgp.WrapError(err, "Positions", za0001, "Offset")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *FreeList) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Name"
	o = append(o, 0x82, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Name)
	// string "Positions"
	o = append(o, 0xa9, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Positions)))
	for za0001 := range z.Positions {
		// map header, size 2
		// string "Block"
		o = append(o, 0x82, 0xa5, 0x42, 0x6c, 0x6f, 0x63, 0x6b)
		o = msgp.AppendUint16(o, z.Positions[za0001].Block)
		// string "Offset"
		o = append(o, 0xa6, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74)
		o = msgp.AppendUint16(o, z.Positions[za0001].Offset)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *FreeList) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Name":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "Positions":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Positions")
				return
			}
			if cap(z.Positions) >= int(zb0002) {
				z.Positions = (z.Positions)[:zb0002]
			} else {
				z.Positions = make([]Position, zb0002)
			}
			for za0001 := range z.Positions {
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Positions", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "Positions", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "Block":
						z.Positions[za0001].Block, bts, err = msgp.ReadUint16Bytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Positions", za0001, "Block")
							return
						}
					case "Offset":
						z.Positions[za0001].Offset, bts, err = msgp.ReadUint16Bytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Positions", za0001, "Offset")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "Positions", za0001)
							return
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *FreeList) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.Name) + 10 + msgp.ArrayHeaderSize + (len(z.Positions) * (14 + msgp.Uint16Size + msgp.Uint16Size))
	return
}


// DecodeMsg implements msgp.Decodable
func (z *Position) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Block":
			z.Block, err = dc.ReadUint16()
			if err != nil {
				err = msgp.WrapError(err, "Block")
				return
			}
		case "Offset":
			z.Offset, err = dc.ReadUint16()
			if err != nil {
				err = msgp.WrapError(err, "Offset")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Position) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Block"
	err = en.Append(0x82, 0xa5, 0x42, 0x6c, 0x6f, 0x63, 0x6b)
	if err != nil {
		return
	}
	err = en.WriteUint16(z.Block)
	if err != nil {
		err = msgp.WrapError(err, "Block")
		return
	}
	// write "Offset"
	err = en.Append(0xa6, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74)
	if err != nil {
		return
	}
	err = en.WriteUint16(z.Offset)
	if err != nil {
		err = msgp.WrapError(err, "Offset")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Position) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Block"
	o = append(o, 0x82, 0xa5, 0x42, 0x6c, 0x6f, 0x63, 0x6b)
	o = msgp.AppendUint16(o, z.Block)
	// string "Offset"
	o = append(o, 0xa6, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74)
	o = msgp.AppendUint16(o, z.Offset)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Position) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Block":
			z.Block, bts, err = msgp.ReadUint16Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Block")
				return
			}
		case "Offset":
			z.Offset, bts, err = msgp.ReadUint16Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Offset")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Position) Msgsize() (s int) {
	s = 1 + 6 + msgp.Uint16Size + 7 + msgp.Uint16Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ResultNode) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Pos":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Pos")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "Pos")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Block":
					z.Pos.Block, err = dc.ReadUint16()
					if err != nil {
						err = msgp.WrapError(err, "Pos", "Block")
						return
					}
				case "Offset":
					z.Pos.Offset, err = dc.ReadUint16()
					if err != nil {
						err = msgp.WrapError(err, "Pos", "Offset")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "Pos")
						return
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ResultNode) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "Pos"
	err = en.Append(0x81, 0xa3, 0x50, 0x6f, 0x73)
	if err != nil {
		return
	}
	// map header, size 2
	// write "Block"
	err = en.Append(0x82, 0xa5, 0x42, 0x6c, 0x6f, 0x63, 0x6b)
	if err != nil {
		return
	}
	err = en.WriteUint16(z.Pos.Block)
	if err != nil {
		err = msgp.WrapError(err, "Pos", "Block")
		return
	}
	// write "Offset"
	err = en.Append(0xa6, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74)
	if err != nil {
		return
	}
	err = en.WriteUint16(z.Pos.Offset)
	if err != nil {
		err = msgp.WrapError(err, "Pos", "Offset")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ResultNode) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "Pos"
	o = append(o, 0x81, 0xa3, 0x50, 0x6f, 0x73)
	// map header, size 2
	// string "Block"
	o = append(o, 0x82, 0xa5, 0x42, 0x6c, 0x6f, 0x63, 0x6b)
	o = msgp.AppendUint16(o, z.Pos.Block)
	// string "Offset"
	o = append(o, 0xa6, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74)
	o = msgp.AppendUint16(o, z.Pos.Offset)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ResultNode) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Pos":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Pos")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "Pos")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Block":
					z.Pos.Block, bts, err = msgp.ReadUint16Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Pos", "Block")
						return
					}
				case "Offset":
					z.Pos.Offset, bts, err = msgp.ReadUint16Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Pos", "Offset")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "Pos")
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ResultNode) Msgsize() (s int) {
	s = 1 + 4 + 1 + 6 + msgp.Uint16Size + 7 + msgp.Uint16Size
	return
}
